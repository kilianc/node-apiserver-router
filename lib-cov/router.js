/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['router.js']) {
  _$jscoverage['router.js'] = [];
  _$jscoverage['router.js'][1] = 0;
  _$jscoverage['router.js'][2] = 0;
  _$jscoverage['router.js'][5] = 0;
  _$jscoverage['router.js'][6] = 0;
  _$jscoverage['router.js'][7] = 0;
  _$jscoverage['router.js'][8] = 0;
  _$jscoverage['router.js'][9] = 0;
  _$jscoverage['router.js'][10] = 0;
  _$jscoverage['router.js'][11] = 0;
  _$jscoverage['router.js'][12] = 0;
  _$jscoverage['router.js'][13] = 0;
  _$jscoverage['router.js'][15] = 0;
  _$jscoverage['router.js'][16] = 0;
  _$jscoverage['router.js'][17] = 0;
  _$jscoverage['router.js'][20] = 0;
  _$jscoverage['router.js'][21] = 0;
  _$jscoverage['router.js'][22] = 0;
  _$jscoverage['router.js'][23] = 0;
  _$jscoverage['router.js'][24] = 0;
  _$jscoverage['router.js'][25] = 0;
  _$jscoverage['router.js'][27] = 0;
  _$jscoverage['router.js'][33] = 0;
  _$jscoverage['router.js'][36] = 0;
  _$jscoverage['router.js'][37] = 0;
  _$jscoverage['router.js'][40] = 0;
  _$jscoverage['router.js'][41] = 0;
  _$jscoverage['router.js'][42] = 0;
  _$jscoverage['router.js'][43] = 0;
  _$jscoverage['router.js'][46] = 0;
  _$jscoverage['router.js'][47] = 0;
  _$jscoverage['router.js'][48] = 0;
  _$jscoverage['router.js'][49] = 0;
  _$jscoverage['router.js'][50] = 0;
  _$jscoverage['router.js'][51] = 0;
  _$jscoverage['router.js'][55] = 0;
}
_$jscoverage['router.js'][1]++;
var Router = module.exports = (function () {
  _$jscoverage['router.js'][2]++;
  this.routes = {};
});
_$jscoverage['router.js'][5]++;
Router.prototype.update = (function (modules, middlewareList) {
  _$jscoverage['router.js'][6]++;
  var routes = Object.create(null);
  _$jscoverage['router.js'][7]++;
  var map = Object.create(null);
  _$jscoverage['router.js'][8]++;
  Object.keys(modules).forEach((function (version) {
  _$jscoverage['router.js'][9]++;
  Object.keys(modules[version]).forEach((function (moduleName) {
  _$jscoverage['router.js'][10]++;
  var module_name = moduleName.replace(/([A-Z][a-z][^A-Z]*)/g, "_$1").toLowerCase();
  _$jscoverage['router.js'][11]++;
  Object.keys(modules[version][moduleName]).forEach((function (methodName) {
  _$jscoverage['router.js'][12]++;
  if (methodName[0] === "_") {
    _$jscoverage['router.js'][13]++;
    return;
  }
  _$jscoverage['router.js'][15]++;
  var route = getRoutePath(version, module_name, methodName);
  _$jscoverage['router.js'][16]++;
  if (routes[route]) {
    _$jscoverage['router.js'][17]++;
    throw new Error("Routing conflict on \"" + route + "\": " + map[route].version + "." + map[route].moduleName + "." + map[route].methodName + " is anbiguous with " + version + "." + moduleName + "." + methodName);
  }
  _$jscoverage['router.js'][20]++;
  map[route] = {version: version, moduleName: moduleName, methodName: methodName};
  _$jscoverage['router.js'][21]++;
  var chain = routes[route] = getChain(middlewareList, route);
  _$jscoverage['router.js'][22]++;
  chain.push((function (request, response, callback) {
  _$jscoverage['router.js'][23]++;
  try {
    _$jscoverage['router.js'][24]++;
    modules[version][moduleName][methodName](request, response);
    _$jscoverage['router.js'][25]++;
    callback();
  }
  catch (err) {
    _$jscoverage['router.js'][27]++;
    callback(err);
  }
}));
}));
}));
}));
  _$jscoverage['router.js'][33]++;
  this.routes = routes;
});
_$jscoverage['router.js'][36]++;
Router.prototype.get = (function (pathname) {
  _$jscoverage['router.js'][37]++;
  return this.routes[pathname];
});
_$jscoverage['router.js'][40]++;
function getRoutePath(version, module_name, methodName) {
  _$jscoverage['router.js'][41]++;
  var words = [];
  _$jscoverage['router.js'][42]++;
  methodName.replace(/([A-Za-z][^A-Z]*)/g, (function (match) {
  _$jscoverage['router.js'][42]++;
  words.push(match);
}));
  _$jscoverage['router.js'][43]++;
  return ["", version, module_name, words.join("_")].join("/").toLowerCase();
}
_$jscoverage['router.js'][46]++;
function getChain(middlewareList, route) {
  _$jscoverage['router.js'][47]++;
  var chain = [];
  _$jscoverage['router.js'][48]++;
  if (middlewareList) {
    _$jscoverage['router.js'][49]++;
    middlewareList.forEach((function (middleware) {
  _$jscoverage['router.js'][50]++;
  if (route.match(middleware.route)) {
    _$jscoverage['router.js'][51]++;
    chain.push(middleware.handle);
  }
}));
  }
  _$jscoverage['router.js'][55]++;
  return chain;
}
_$jscoverage['router.js'].source = ["var Router = module.exports = function () {","  this.routes = {}","}","","Router.prototype.update = function (modules, middlewareList) {","  var routes = Object.create(null)","  var map = Object.create(null)","  Object.keys(modules).forEach(function (version) {","    Object.keys(modules[version]).forEach(function (moduleName) {","      var module_name = moduleName.replace(/([A-Z][a-z][^A-Z]*)/g, '_$1').toLowerCase()","      Object.keys(modules[version][moduleName]).forEach(function (methodName) {","        if (methodName[0] === '_') {","          return","        }","        var route = getRoutePath(version, module_name, methodName)","        if (routes[route]) {","          throw new Error('Routing conflict on \"' + route + '\": ' + map[route].version + '.' + map[route].moduleName + '.' + map[route].methodName +","                          ' is anbiguous with ' + version + '.' + moduleName + '.' + methodName)","        }","        map[route] = { version: version, moduleName: moduleName, methodName: methodName }","        var chain = routes[route] = getChain(middlewareList, route)","        chain.push(function (request, response, callback) {","          try {","            modules[version][moduleName][methodName](request, response)","            callback()","          } catch (err) {","            callback(err)","          }","        })","      })","    })","  })","  this.routes = routes","}","","Router.prototype.get = function (pathname) {","  return this.routes[pathname]","}","","function getRoutePath(version, module_name, methodName) {","  var words = []","  methodName.replace(/([A-Za-z][^A-Z]*)/g, function (match) { words.push(match) })","  return ['', version, module_name, words.join('_')].join('/').toLowerCase()","}","","function getChain(middlewareList, route) {","  var chain = []","  if (middlewareList) {","    middlewareList.forEach(function (middleware) {","      if (route.match(middleware.route)) {","        chain.push(middleware.handle)","      }","    })","  }","  return chain","}"];
